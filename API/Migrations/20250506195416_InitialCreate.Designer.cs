// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20250506195416_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CurrentTermEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("CurrentTermStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<bool?>("IsAutoRenew")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChurned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OriginalContractStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("RenewalPriceIncrease")
                        .HasColumnType("decimal(5, 4)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<int?>("TermLength")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Contract__3214EC2787269CD5");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("API.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Customer__3214EC271B2D8F89");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("API.Models.MonthlyBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("Month")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__MonthlyB__3214EC277F555388");

                    b.ToTable("MonthlyBalances");
                });

            modelBuilder.Entity("API.Models.RecognitionEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int")
                        .HasColumnName("ContractID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.HasKey("Id")
                        .HasName("PK__Recognit__3214EC278FF09EA3");

                    b.HasIndex("ContractId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("RecognitionEvent", (string)null);
                });

            modelBuilder.Entity("API.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Services__3214EC27A6163DF6");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC27B80C871B");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E4940523D0")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.Contract", b =>
                {
                    b.HasOne("API.Models.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Contracts_Customers");

                    b.HasOne("API.Models.Service", "Service")
                        .WithMany("Contracts")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Contracts_Services");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("API.Models.RecognitionEvent", b =>
                {
                    b.HasOne("API.Models.Contract", "Contract")
                        .WithMany("RecognitionEvents")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("FK_RecognitionEvent_Contracts");

                    b.HasOne("API.Models.Customer", "Customer")
                        .WithMany("RecognitionEvents")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_RecognitionEvent_Customers");

                    b.HasOne("API.Models.Service", "Service")
                        .WithMany("RecognitionEvents")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_RecognitionEvent_Services");

                    b.Navigation("Contract");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("API.Models.Contract", b =>
                {
                    b.Navigation("RecognitionEvents");
                });

            modelBuilder.Entity("API.Models.Customer", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("RecognitionEvents");
                });

            modelBuilder.Entity("API.Models.Service", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("RecognitionEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
